/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include "SharedData.h"

// Constructor with field values
SharedData::SharedData(const std::string& text,
                       const std::vector<double>& content) :
        WirePortable(),
        text(text),
        content(content)
{
}

// Read structure on a Wire
bool SharedData::read(yarp::os::idl::WireReader& reader)
{
    if (!read_text(reader)) {
        return false;
    }
    if (!read_content(reader)) {
        return false;
    }
    if (reader.isError()) {
        return false;
    }
    return true;
}

// Read structure on a Connection
bool SharedData::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(2)) {
        return false;
    }
    if (!read(reader)) {
        return false;
    }
    return true;
}

// Write structure on a Wire
bool SharedData::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_text(writer)) {
        return false;
    }
    if (!write_content(writer)) {
        return false;
    }
    if (writer.isError()) {
        return false;
    }
    return true;
}

// Write structure on a Connection
bool SharedData::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!write(writer)) {
        return false;
    }
    return true;
}

// Convert to a printable string
std::string SharedData::toString() const
{
    yarp::os::Bottle b;
    if (!yarp::os::Portable::copyPortable(*this, b)) {
        return {};
    }
    return b.toString();
}

// read text field
bool SharedData::read_text(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(text)) {
        reader.fail();
        return false;
    }
    return true;
}

// write text field
bool SharedData::write_text(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(text)) {
        return false;
    }
    return true;
}

// read (nested) text field
bool SharedData::nested_read_text(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(text)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) text field
bool SharedData::nested_write_text(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(text)) {
        return false;
    }
    return true;
}

// read content field
bool SharedData::read_content(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    content.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(content.data()), content.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write content field
bool SharedData::write_content(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, content.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(content.data()), content.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) content field
bool SharedData::nested_read_content(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    content.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(content.data()), content.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write (nested) content field
bool SharedData::nested_write_content(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, content.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(content.data()), content.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}
